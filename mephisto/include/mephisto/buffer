#ifndef MEPHISTO_DETAIL_META
#define MEPHISTO_DETAIL_META
#include <alpaka/alpaka.hpp>

#include <mephisto/array>
#include <type_traits>

#include <iostream>

namespace mephisto {

/**
 * The context of a buffer.
 *
 * This is mainly a pair of host and accelerator and can be used to specialize
 * copy operations etc.
 *
 * @tparam HostT The host type of the buffer
 * @tparam DeviceT The accelerator type this buffer is used for
 */
template <
  typename HostT,
  typename DeviceT>
struct Context {
  using host_t = typename std::remove_cv<HostT>::type;
  using device_t = typename std::remove_cv<DeviceT>::type;

  HostT &hostDev;
  DeviceT &accDev;

  Context(HostT &hostDev, DeviceT &accDev) : hostDev(hostDev), accDev(accDev) {}
};

/**
 * Create context from host and device/accelerator
 *
 */
template <
  typename HostT,
  typename DeviceT>
Context<HostT, DeviceT> make_ctx(HostT &host, DeviceT &device) {
  return Context<HostT, DeviceT>(host, device);
};

/**
 * Information about a local chunk of memory and its coordinates relative to
 * the global origin.
 */
template <
    typename PatternT>
struct Metadata {
    static constexpr int NDim = PatternT::ndim();

    using OffsetT = typename PatternT::index_type;
    using ExtentT = typename PatternT::size_type;
    using OffsetsT = mephisto::array<OffsetT, NDim>;
    using ExtentsT = mephisto::array<ExtentT, NDim>;

    // Offset at first element
    OffsetsT offsets;
    ExtentsT localExtents;

    size_t chunkSize;

    Metadata(OffsetsT offsets, ExtentsT localExtents) : offsets(offsets), localExtents(localExtents) {
        // Calculate the chunk size once
        chunkSize = 1;
        for(auto i : localExtents) {
            chunkSize *= i;
        }
    }
    Metadata() {}


    template<
        typename IndexT>
    OffsetsT
    global_coords(OffsetT localOffset) {
        // calculate the global coordinates from the local
    }
};


template <
    typename ElementT,
    typename DeviceT,
    typename MetaT,
    typename Alignment =
        typename alpaka::core::align::OptimalAlignment<sizeof(ElementT)>::type>
struct DeviceDataBuffer {

    static constexpr size_t MetaOffset = sizeof(MetaT) + sizeof(MetaT) % Alignment::value;

    ElementT *data;

    DeviceDataBuffer(ElementT *data) : data(data) {}

    ALPAKA_FN_HOST_ACC
    const MetaT &getMeta() const {
        // get the memory MetaOffset bytes before data
        return *reinterpret_cast<MetaT *>(reinterpret_cast<char *>(data) - MetaOffset);
    }

    /**
     * Returns the one-past-end pointer
     */
    ALPAKA_FN_HOST_ACC
    ElementT *begin() const {
        return data;
    }

    /**
     * Returns the one-past-end pointer
     */
    ALPAKA_FN_HOST_ACC
    ElementT *end() const {
        return begin() + getMeta().chunkSize;
    }
};



/**
 * Data buffer is used to reduce the number of parameters to avoid hitting the 256 byte
 * limit.
 *
 * buf[[meta]..<padding>..[data...]]
 *
 */
template <
    typename ElementT,
    typename ContextT,
    typename PatternT,
    typename ViewT,
    typename Alignment =
        typename alpaka::core::align::OptimalAlignment<sizeof(ElementT)>::type>
struct HostDataBuffer {
  using NonConstElementT = typename std::remove_const<ElementT>::type;
  using HostT            = typename ContextT::host_t;
  using DeviceT          = typename ContextT::device_t;
  using MetaT            = Metadata<PatternT>;
  using DeviceBufT =
      DeviceDataBuffer<NonConstElementT, DeviceT, MetaT, Alignment>;
  using DimT = alpaka::dim::DimInt<1>;
  using HostBufT =
      alpaka::mem::view::ViewPlainPtr<HostT, ElementT, DimT, std::size_t>;

  static constexpr size_t MetaOffset =
      sizeof(MetaT) + sizeof(MetaT) % Alignment::value;

  ContextT &  context;
  ViewT &     view;
  std::size_t bufsize;
  std::size_t datasize;
  MetaT       meta;
  HostBufT    hostBuf;
  alpaka::mem::buf::Buf<DeviceT, char, DimT, std::size_t> deviceBuf;

  HostDataBuffer(ContextT &context, ViewT &view)
    : context(context)
    , view(view)
    , bufsize(
          sizeof(MetaT) + std::distance(view.begin, view.end) * sizeof(ElementT) + Alignment::value)
    , datasize(std::distance(view.begin, view.end))
    , meta(MetaT())
    , hostBuf(view.begin, context.hostDevice, datasize)
    , deviceBuf(alpaka::mem::buf::alloc<char, size_t>(context.accDevice, bufsize))
  { } /* TODO: find infos from view */

    DeviceBufT getDeviceDataBuffer() {
      auto accBuf = alpaka::mem::view::getPtrNative(deviceBuf);
      // Add MetaOffset bytes offset to the accBuf address
      auto deviceBufAddr = reinterpret_cast<NonConstElementT *>(reinterpret_cast<char *>(accBuf) + MetaOffset);
      return DeviceBufT(deviceBufAddr);
    }

    ElementT *getData() {
      return view.begin();
    }

    alpaka::mem::view::ViewPlainPtr<
        DeviceT,
        MetaT,
        alpaka::dim::Dim<std::size_t>,
        alpaka::size::Size<std::size_t>>
    getDeviceMetaView()
    {
      auto devicePtr = alpaka::mem::view::getPtrNative(deviceBuf);
      return alpaka::mem::view::ViewPlainPtr<DeviceT, MetaT,
                                             alpaka::dim::Dim<std::size_t>,
                                             alpaka::size::Size<std::size_t>>(
          reinterpret_cast<MetaT *>(devicePtr), context.accDevice, static_cast<std::size_t>(1));
    }

    alpaka::mem::view::ViewPlainPtr<
        HostT,
        MetaT,
        alpaka::dim::Dim<std::size_t>,
        alpaka::size::Size<std::size_t>>
    getHostMetaView()
    {
      return alpaka::mem::view::createStaticDevMemView(
          &meta, context.hostDevice, static_cast<std::size_t>(1));
    }

    alpaka::mem::view::
        ViewPlainPtr<DeviceT, NonConstElementT, alpaka::dim::Dim<std::size_t>, alpaka::size::Size<std::size_t>>
        getDeviceDataView()
    {
      return alpaka::mem::view::ViewPlainPtr<DeviceT, NonConstElementT,
                                             alpaka::dim::Dim<std::size_t>,
                                             alpaka::size::Size<std::size_t>>(
          reinterpret_cast<NonConstElementT *>(
              reinterpret_cast<char *>(
                  alpaka::mem::view::getPtrNative(deviceBuf)) +
              MetaOffset),
          context.accDevice, static_cast<std::size_t>(datasize));
    }

    HostBufT &getHostDataView() {
       return hostBuf;
    }
};

}

#endif
